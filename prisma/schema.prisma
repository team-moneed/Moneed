generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  nickname       String
  profileImage   String
  ageRange       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  birthday       String?
  birthyear      String?
  email          String?         @unique
  name           String?
  id             String          @id @default(cuid())
  gender         String?
  role           Role            @default(USER)
  lastLoginAt    DateTime        @default(now())
  chat_message   chat_message[]
  comments       Comment[]
  oauthAccounts  OAuthAccount[]
  postLikes      PostLike[]
  postViews      PostViews[]
  posts          Post[]
  selectedStocks SelectedStock[]

  @@map("users")
}

model LeaveReason {
  id        Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())

  @@map("leave_reasons")
}

model Post {
  id             Int         @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @default(now()) @updatedAt
  userId         String
  thumbnailImage String?
  score          Float       @default(0)
  stockSymbol    String
  comments       Comment[]
  postLikes      PostLike[]
  postViews      PostViews[]
  stock          Stock       @relation(fields: [stockSymbol], references: [symbol], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostViews {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_views")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model OAuthAccount {
  providerUserId        String
  connectedAt           DateTime @default(now())
  synchedAt             DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
  accessToken           String
  refreshToken          String
  id                    String   @id @default(cuid())
  userId                String
  provider              String
  accessTokenExpiresIn  DateTime
  refreshTokenExpiresIn DateTime
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("oauth_accounts")
}

model Stock {
  id             Int             @id @default(autoincrement())
  logoUrl        String
  refUrl         String?
  sector         String
  subSector      String
  summary        String
  symbol         String          @unique
  nameEn         String
  nameKo         String
  nation         String
  posts          Post[]
  selectedStocks SelectedStock[]

  @@map("stocks")
}

model SelectedStock {
  userId      String
  id          Int    @id @default(autoincrement())
  stockSymbol String
  stock       Stock  @relation(fields: [stockSymbol], references: [symbol])
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockSymbol])
  @@map("selected_stocks")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model chat_room {
  id                 BigInt         @id @default(autoincrement())
  roomName           String?        @db.VarChar
  roomCreator        BigInt?
  roomJoinLimitation Int?           @default(1)
  createdAt          DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?      @default(now()) @db.Timestamptz(6)
  chat_message       chat_message[]
}

model chat_message {
  id        BigInt    @id @default(autoincrement())
  roomId    BigInt
  senderId  String
  content   String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  chat_room chat_room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  users     User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model ServerTokens {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  tokenKey   String   @unique
  tokenValue String

  @@map("server_tokens")
}

model Shorts {
  id             Int      @id @default(autoincrement())
  videoId        String   @unique
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  thumbnailImage String   @default("")

  @@map("shorts")
}

enum Role {
  ADMIN
  USER
}
