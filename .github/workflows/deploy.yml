name: Deploy Applications

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    NODE_VERSION: '18'
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}/kakao-proxy

jobs:
    # 변경사항 감지
    detect-changes:
        runs-on: ubuntu-latest
        outputs:
            web-changed: ${{ steps.changes.outputs.web }}
            kakao-changed: ${{ steps.changes.outputs.kakao }}
            packages-changed: ${{ steps.changes.outputs.packages }}
            any-changed: ${{ steps.changes.outputs.web == 'true' || steps.changes.outputs.kakao == 'true' || steps.changes.outputs.packages == 'true' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: Detect changes
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      web:
                        - 'apps/web/**'
                        - 'vercel.json'
                      kakao:
                        - 'apps/kakao-proxy-server/**'
                        - 'Dockerfile'
                        - '.dockerignore'
                      packages:
                        - 'packages/**'
                        - 'package.json'
                        - 'yarn.lock'

    # 린팅 및 타입 체크
    lint-and-typecheck:
        runs-on: ubuntu-latest
        needs: detect-changes
        if: needs.detect-changes.outputs.any-changed == 'true'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Build packages
              run: yarn build:packages

            - name: Generate Prisma clients
              run: |
                  cd apps/web && yarn db:generate
                  cd ../kakao-proxy-server && yarn db:generate
                  cd ../..

            - name: Run linting
              run: yarn lint

            - name: Run type checking
              run: yarn type-check

    # 테스트 실행
    test:
        runs-on: ubuntu-latest
        needs: detect-changes
        if: needs.detect-changes.outputs.any-changed == 'true'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Build packages
              run: yarn build:packages

            - name: Generate Prisma clients
              run: |
                  cd apps/web && yarn db:generate
                  cd ../kakao-proxy-server && yarn db:generate
                  cd ../..

            - name: Run tests
              run: |
                  if [ -f "packages/shared/auth/package.json" ] && grep -q '"test"' packages/shared/auth/package.json; then
                    yarn workspace @moneed/auth test
                  else
                    echo "No tests found for @moneed/auth"
                  fi

    # Vercel 배포 (웹 앱)
    deploy-web:
        runs-on: ubuntu-latest
        needs: [detect-changes, lint-and-typecheck, test]
        if: |
            github.ref == 'refs/heads/main' && 
            (needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.packages-changed == 'true')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to Vercel
              uses: amondnet/vercel-action@v25
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
                  vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
                  vercel-args: '--prod'
                  working-directory: ./

    # Docker 이미지 빌드 및 푸시
    build-and-push-docker:
        runs-on: ubuntu-latest
        needs: [detect-changes, lint-and-typecheck, test]
        if: |
            github.ref == 'refs/heads/main' && 
            (needs.detect-changes.outputs.kakao-changed == 'true' || needs.detect-changes.outputs.packages-changed == 'true')
        permissions:
            contents: read
            packages: write
        outputs:
            image-tag: ${{ steps.meta.outputs.tags }}
            image-digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64

    # AWS EC2 배포
    deploy-to-ec2:
        runs-on: ubuntu-latest
        needs: [build-and-push-docker]
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Deploy to EC2
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  port: ${{ secrets.EC2_SSH_PORT || 22 }}
                  script: |
                      # 환경변수 설정
                      export IMAGE_TAG="${{ needs.build-and-push-docker.outputs.image-tag }}"

                      # Docker 로그인
                      echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

                      # 새 이미지 풀
                      docker pull $IMAGE_TAG

                      # 기존 컨테이너 중지 및 제거 (존재할 경우)
                      docker stop kakao-proxy || true
                      docker rm kakao-proxy || true

                      # 새 컨테이너 실행
                      docker run -d \
                        --name kakao-proxy \
                        --restart unless-stopped \
                        -p 8000:8000 \
                        --env-file /home/${{ secrets.EC2_USER }}/.env.production \
                        $IMAGE_TAG

                      # 이전 이미지 정리 (최신 2개 버전만 유지)
                      docker image prune -af --filter "until=72h"

                      # 헬스체크
                      sleep 10
                      curl -f http://localhost:8000/health || exit 1

    # 배포 알림
    notify-deployment:
        runs-on: ubuntu-latest
        needs: [deploy-web, deploy-to-ec2]
        if: always() && github.ref == 'refs/heads/main'
        steps:
            - name: Notify deployment status
              run: |
                  WEB_STATUS="${{ needs.deploy-web.result }}"
                  EC2_STATUS="${{ needs.deploy-to-ec2.result }}"

                  echo "🚀 Deployment Summary:"
                  echo "Web App (Vercel): ${WEB_STATUS:-skipped}"
                  echo "Kakao Proxy (EC2): ${EC2_STATUS:-skipped}"

                  if [[ "$WEB_STATUS" == "failure" || "$EC2_STATUS" == "failure" ]]; then
                    echo "❌ Some deployments failed"
                    exit 1
                  else
                    echo "✅ All deployments successful"
                  fi
